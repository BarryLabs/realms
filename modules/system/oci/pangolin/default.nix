{ config
, lib
, pkgs
, ...
}:
with lib;
let
  module = "pangolin";
  cfg = config.augs.oci.${module};
in
{
  options.augs.oci.${module}.enable = mkEnableOption "enable pangolin";
  config = mkIf cfg.enable {
    virtualisation.podman = {
      enable = true;
      autoPrune.enable = true;
    };
    networking.firewall.interfaces =
      let
        matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
      in
      {
        "${matchAll}".allowedUDPPorts = [ 53 ];
      };

    systemd = { };

    virtualisation = {
      oci-containers = {
        backend = "podman";
        containers = {
          "Gerbil" = {
            image = "fosrl/gerbil:latest";
            log-driver = "journald";
            cmd = [
              "--reachableAt=http://gerbil:3003"
              "--generateAndSaveKeyTo=/var/config/key"
              "--remoteConfig=http://pangolin:3001/api/v1/gerbil/get-config"
              "--reportBandwidthTo=http://pangolin:3001/api/v1/gerbil/receive-bandwidth"
            ];
            dependsOn = [
              "pangolin"
            ];
            extraOptions = [
              "--cap-add=NET_ADMIN"
              "--cap-add=SYS_MODULE"
              "--network-alias=gerbil"
              "--network=pangolin"
            ];
            ports = [
              "51820:51820/udp"
              "443:443/tcp"
              "80:80/tcp"
            ];
            volumes = [
              "/home/mamotdask/Projects/Repos/Realms/.config/composer/config:/var/config:rw"
            ];
          };
        };
      };
    };

    # TODO; Wrap pangolin as a nix module.
    systemd.services."podman-gerbil" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      after = [
        "podman-network-pangolin.service"
      ];
      requires = [
        "podman-network-pangolin.service"
      ];
      partOf = [
        "podman-compose-pangolin-root.target"
      ];
      wantedBy = [
        "podman-compose-pangolin-root.target"
      ];
    };
    virtualisation.oci-containers.containers."pangolin" = {
      image = "fosrl/pangolin:latest";
      volumes = [
        "/home/mamotdask/Projects/Repos/Realms/.config/composer/config:/app/config:rw"
      ];
      log-driver = "journald";
      extraOptions = [
        "--health-cmd=[\"curl\", \"-f\", \"http://localhost:3001/api/v1/\"]"
        "--health-interval=3s"
        "--health-retries=15"
        "--health-timeout=3s"
        "--network-alias=pangolin"
        "--network=pangolin"
      ];
    };
    systemd.services."podman-pangolin" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      after = [
        "podman-network-pangolin.service"
      ];
      requires = [
        "podman-network-pangolin.service"
      ];
      partOf = [
        "podman-compose-pangolin-root.target"
      ];
      wantedBy = [
        "podman-compose-pangolin-root.target"
      ];
    };
    virtualisation.oci-containers.containers."traefik" = {
      image = "traefik:v3.3.3";
      volumes = [
        "/home/mamotdask/Projects/Repos/Realms/.config/composer/config/letsencrypt:/letsencrypt:rw"
        "/home/mamotdask/Projects/Repos/Realms/.config/composer/config/traefik:/etc/traefik:ro"
      ];
      cmd = [ "--configFile=/etc/traefik/traefik_config.yml" ];
      dependsOn = [
        "gerbil"
        "pangolin"
      ];
      log-driver = "journald";
      extraOptions = [
        "--network=container:gerbil"
      ];
    };
    systemd.services."podman-traefik" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      partOf = [
        "podman-compose-pangolin-root.target"
      ];
      wantedBy = [
        "podman-compose-pangolin-root.target"
      ];
    };
    systemd.services."podman-network-pangolin" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f pangolin";
      };
      script = ''
        podman network inspect pangolin || podman network create pangolin --driver=bridge
      '';
      partOf = [ "podman-compose-pangolin-root.target" ];
      wantedBy = [ "podman-compose-pangolin-root.target" ];
    };
    systemd.targets."podman-compose-pangolin-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
